{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAIA,MAAMA,EAAQC,GACJ,IAAIC,QAAQC,IACfC,WAAW,KACPD,KAAWF,MACZA,KAIJI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACbjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAClCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAGtD,OAAA,IAAIhB,QAAQC,IACfA,EAAQa,MAIVX,EAASW,GAAgBT,QAAQY,MAAMH,GAK7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACvBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,GAEf,IAAIzB,QAAQ,CAACC,EAASyB,KACrB5B,MAAAA,EAAQoB,EAA0B,IAAK,KAC7ChB,WAAW,KACHyB,MAAAA,EAAaN,KAAKE,SAAW,GAC7BnB,EAAON,EACP8B,EAAKH,EAAYG,GACnBD,GACF1B,EAAQ,CAAE2B,GAAAA,EAAIxB,KAAAA,IAEhBsB,EAAOD,EAAYG,KAClB9B,KAID+B,EAAa,EAAGD,GAAAA,EAAIxB,KAAAA,MACxBC,QAAQC,mBAAmBsB,kBAAmBxB,QAG1C0B,EAAWF,IACfvB,QAAQ0B,qCAAqCH,+BAG/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH;;AC3CT,aAHA,QAAA,oBACA,QAAA,cACA,QAAA,cACA,QAAA","file":"src.6889f7d2.js","sourceRoot":"../src","sourcesContent":["// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n   return new Promise(resolve => {\n       setTimeout(() => {\n           resolve(`${ms}`)\n       }, ms)\n   })\n}\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback - функцию callback,\n// а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    \n    return new Promise(resolve => {\n        resolve(updatedUsers)\n    })\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","// Задание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback - функции onSuccess и onError,\n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  \n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      const time = delay;\n      const id = transaction.id\n      if (canProcess) {\n        resolve({ id, time });\n      }\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n \nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './sass/main.scss';\nimport './js/task1';\nimport './js/task2';\nimport './js/task3';"]}